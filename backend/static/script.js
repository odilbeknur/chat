document.addEventListener('DOMContentLoaded', () => {
   const chatMessages = document.getElementById('chat-messages');
   const userInput = document.getElementById('user-input');
   const sendBtn = document.getElementById('send-btn');

   async function updateRecommendedMaterials(userText) {
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–º—É
    const topicResponse = await fetch('/api/detect-topic', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ text: userText, user_id: 'guest' })
    });
    const { topic } = await topicResponse.json();

    // –ü–æ–ª—É—á–∞–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª—ã –ø–æ —Ç–µ–º–µ
    const materialsResponse = await fetch(`/api/materials/${topic}`);
    const materials = await materialsResponse.json();
    
    // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º
    const container = document.getElementById('recommended-materials');
    container.innerHTML = materials.map(m => `
        <div class="material-card">
            <a href="/static/materials/${m.file}" target="_blank">
                üìÑ ${m.name}
            </a>
        </div>
    `).join('');
}
   // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
   async function sendMessage() {
       const text = userInput.value.trim();
       if (!text) return;

       // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
       addMessage(text, 'user-message');
       userInput.value = '';
      // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏

    await updateRecommendedMaterials(text);  // <-- –î–æ–±–∞–≤–∏–ª–∏ —ç—Ç—É —Å—Ç—Ä–æ–∫—É!

       // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å–µ—Ä–≤–µ—Ä
       try {
           const response = await fetch('/api/chat', {
               method: 'POST',
               headers: { 'Content-Type': 'application/json' },
               body: JSON.stringify({ text, user_id: 'guest' })
           });
           const data = await response.json();
           addMessage(data.response, 'bot-message');
       } catch (error) {
           addMessage("–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º", 'bot-message error');
       }
   }

   // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç
   function addMessage(text, className) {
       const msgDiv = document.createElement('div');
       msgDiv.className = `message ${className}`;
       msgDiv.textContent = text;
       chatMessages.appendChild(msgDiv);
       chatMessages.scrollTop = chatMessages.scrollHeight;
   }

   function displayRecommendedMaterials(materials) {
      const container = document.getElementById("recommended-materials");
      container.innerHTML = "";  // –û—á–∏—Å—Ç–∏–º —Å—Ç–∞—Ä—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã
  
      materials.forEach(material => {
          const div = document.createElement("div");
  
          const title = document.createElement("p");
          title.textContent = material.name;
  
          // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞
          if (material.file.endsWith(".jpg") || material.file.endsWith(".jpeg") || material.file.endsWith(".png") || material.file.endsWith(".webp")) {
              const img = document.createElement("img");
              img.src = material.file;
              img.alt = material.name;
              img.style.maxWidth = "100%";
              div.appendChild(title);
              div.appendChild(img);
          } else if (material.file.endsWith(".mp4")) {
              const video = document.createElement("video");
              video.src = material.file;
              video.controls = true;
              video.style.maxWidth = "100%";
              div.appendChild(title);
              div.appendChild(video);
          } else {
              const link = document.createElement("a");
              link.href = material.file;
              link.textContent = "–û—Ç–∫—Ä—ã—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª";
              link.target = "_blank";
              div.appendChild(title);
              div.appendChild(link);
          }
  
          container.appendChild(div);
      });
  }
  

   // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
   sendBtn.addEventListener('click', sendMessage);
   userInput.addEventListener('keypress', (e) => {
       if (e.key === 'Enter') sendMessage();
   });
});